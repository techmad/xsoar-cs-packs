args:
- description: JSON string to verfiy.
  name: json
  required: true
- description: Optional schema against which to validate the JSON input.
  name: schema
comment: Verifies if the supplied JSON string is valid and optionally verifies against
  a provided schema. The script utilizes Powershell's Test-JSON cmdlet.
commonfields:
  id: VerifyJSON
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ""
    itemVersion: 1.2.80
    packID: CommonScripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/powershell:7.0.1.9103
name: VerifyJSON
outputs:
- contextPath: VerifyJSON.Result
  description: Whether the passed JSON was verified.
  type: boolean
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2


  function Main() {
      $json = $demisto.Args()["json"]
      $schema = $demisto.Args()["schema"]
      if ($schema) {
          $res = Test-Json -Json $json -Schema $schema -ErrorAction SilentlyContinue -ErrorVariable err
      }
      else {
          $res = Test-Json -Json $json -ErrorAction SilentlyContinue -ErrorVariable err
      }
      $outputs = @{VerifyJSON = @{Result = $res } }
      if ($res) {
          ReturnOutputs "Verify JSON completed successfully" -Outputs $outputs | Out-Null
          return
      }
      else {
          $errMsg = "$($err[0].Exception.Message)"
          if ($err[0].Exception.InnerException.Message) {
              $errMsg += " $($err[0].Exception.InnerException.Message)"
          }
          if ($err[0].ErrorDetails.Message) {
              $errMsg += " $($err[0].ErrorDetails.Message)"
          }
          ReturnError $errMsg $err $outputs | Out-Null
      }
  }

  # Execute Main when not in Tests
  if ($MyInvocation.ScriptName -notlike "*.Tests.ps1") {
      Main
  }
scripttarget: 0
system: true
tags:
- JSON
- Utility
type: powershell
