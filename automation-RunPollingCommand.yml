args:
- description: List of IDs to poll
  name: ids
  required: true
- description: Name of the polling command to run
  name: pollingCommand
  required: true
- defaultValue: ids
  description: Name of the argument of the polling command
  name: pollingCommandArgName
  required: true
- description: Commas separated arguments of the polling command
  name: additionalPollingCommandArgNames
- description: Commas separated arguments values of the polling command
  name: additionalPollingCommandArgValues
comment: Runs a specified polling command one time. This is useful for initiating
  a local playbook context before running a polling scheduled task.
commonfields:
  id: RunPollingCommand
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ""
    itemVersion: 1.2.80
    packID: CommonScripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
enabled: true
name: RunPollingCommand
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2




  def prepare_arg_dict(ids_arg_name, ids, additional_arg_names, additional_arg_values):
      if not isinstance(ids, list):
          ids = [ids]
      for i, val in enumerate(ids):
          ids[i] = str(ids[i])

      args_names = [unicode.strip(name) for name in argToList(additional_arg_names)]
      args_values = [unicode.strip(value) for value in argToList(additional_arg_values)]

      if len(args_names) != len(args_values):
          raise ValueError('arg names and arg values lists does not match, please check your inputs:\n'
                           'arg names ({}): {}\narg values ({}): {}'.format(len(args_names), args_names,
                                                                            len(args_values), args_values)
                           )

      args = dict(zip(args_names, args_values))
      args[ids_arg_name] = ','.join(argToList(ids))

      return args


  def main(args):
      try:
          args = prepare_arg_dict(args.get('pollingCommandArgName'),
                                  args.get('ids'),
                                  args.get('additionalPollingCommandArgNames'),
                                  args.get('additionalPollingCommandArgValues'),
                                  )
          demisto.results(demisto.executeCommand(demisto.getArg('pollingCommand'), args))
      except Exception as exp:
          return_error('An error occurred: {}'.format(exp), error=exp)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main(demisto.args())
scripttarget: 0
subtype: python2
system: true
tags: []
type: python
